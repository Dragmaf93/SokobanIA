% 

integer(0..100).

#maxint = 100.
box(Id):- positionBox(_,Id,_,_).

adjacent(I1,J1,I2,J2):-ground(I1,J1),ground(I2,J2),I1=I2,J2=J1+1.
adjacent(I1,J1,I2,J2):-ground(I1,J1),ground(I2,J2),I1=I2,J2=J1-1.
adjacent(I1,J1,I2,J2):-ground(I1,J1),ground(I2,J2),J1=J2,I2=I1+1.
adjacent(I1,J1,I2,J2):-ground(I1,J1),ground(I2,J2),J1=J2,I2=I1-1.
 
time(1..31).
movementPlayer(right,T,I,J) | not_movementPlayer(right,T,I,J) :- time(T),ground(I,J).
movementPlayer(left,T,I,J) | not_movementPlayer(left,T,I,J) :- time(T),ground(I,J).
movementPlayer(up,T,I,J) | not_movementPlayer(up,T,I,J) :- time(T),ground(I,J).
movementPlayer(down,T,I,J) | not_movementPlayer(down,T,I,J) :- time(T),ground(I,J).
 
positionPlayer(1,I,J):-player(I,J).
%  nello stesso istante, direzioni diverse
:-movementPlayer(Direction2,Time,_,_), movementPlayer(Direction1,Time,_,_), Direction1!=Direction2.

% nello stesso istante, spostamenti a partire da posizioni diverse
:-movementPlayer(_,Time,I1,J1),movementPlayer(_,Time,I2,J2),I1!=I2,J1!=J2.
:-movementPlayer(_,Time,I,J1),movementPlayer(_,Time,I,J2),J1!=J2.
:-movementPlayer(_,Time,I1,J),movementPlayer(_,Time,I2,J),I1!=I2.

nextTime(T2,T1) :- T2 = T1+1, time(T2), time(T1).
realTime(Time):- movementPlayer(_,Time,_,_).

% i tempi devono essere consecutivi
:- movementPlayer(_,Time2,_,_), not realTime(Time1), Time2!=1,nextTime(Time2,Time1).

%  i tempi devono partire da 1
:- #min{Time: movementPlayer(_,Time,_,_)} = T, integer(T), T != 1.

% non è possibile che dati 2 tempi consecutivi, le celle non siano adiacenti
:-positionPlayer(Time1,I1,J1), positionPlayer(Time2,I2,J2), nextTime(Time2,Time1), not adjacent(I1,J1,I2,J2).
:-movementPlayer(_,Time1,I1,J1), movementPlayer(_,Time2,I2,J2), nextTime(Time2,Time1), not adjacent(I1,J1,I2,J2).

% non è possibile che con tempi consecutivi, ci sia uno spostamento nella stessa cella 
:- movementPlayer(_,Time1,I,J), movementPlayer(_,Time2,I,J), nextTime(Time2,Time1).
 
% calcolo delle posizioni successive del player
positionPlayer(Time2,I1,J2):- movementPlayer(right,Time1,I1,J1),integer(J2),J2=J1+1, nextTime(Time2,Time1).
positionPlayer(Time2,I1,J2):- movementPlayer(left,Time1,I1,J1),integer(J2),J2=J1-1, nextTime(Time2,Time1).
positionPlayer(Time2,I2,J1):- movementPlayer(up,Time1,I1,J1),integer(I2),I2=I1-1, nextTime(Time2,Time1).
positionPlayer(Time2,I2,J1):- movementPlayer(down,Time1,I1,J1),integer(I2),I2=I1+1, nextTime(Time2,Time1).

% non è possibile un movimento T1 I,J diverso spostamento
:-movementPlayer(_,Time1,I1,J1),nextTime(Time2,Time1),movementPlayer(_,Time2,I2,J2), not positionPlayer(Time2,I2,J2). 

% non è possibile che data una posizione, non sia sul ground
:-positionPlayer(_,I,J), not ground(I,J).

% non è possibile che al tempo 1 non ci sia il player
:- movementPlayer(_,1,I,J), not player(I,J).
 
% non è possibile che allultimo istante non ci sia il goal
maxTime(Time):-integer(Time), Time=#max{T: positionPlayer(T,_,_)}.

goalWithBox(I,J):-goal(I,J),positionBox(Time,_,I,J),maxTime(Time).
:-goal(I,J),not goalWithBox(I,J).

% non è possibile che non ci siano movimenti
:- #count{T: positionPlayer(T,_,_)} < 1.

%:~ positionPlayer(Time,_,_). [1:1]

%gli spostamenti delle box
positionBox(Time2,Id,I,Jbox2):- movementPlayer(right,Time1,I,Jplayer),positionBox(_,Id,I,Jbox),
	Jbox=Jplayer+1,nextTime(Time2,Time1),integer(Jbox2),Jbox2=Jbox+1.
positionBox(Time2,Id,I,Jbox2):- movementPlayer(left,Time1,I,Jplayer),positionBox(_,Id,I,Jbox),
	Jbox=Jplayer-1,nextTime(Time2,Time1),integer(Jbox2),Jbox2=Jbox-1.
positionBox(Time2,Id,Ibox2,J):- movementPlayer(up,Time1,Iplayer,J),positionBox(_,Id,Ibox,J),
	Ibox=Iplayer-1,nextTime(Time2,Time1),integer(Ibox2),Ibox2=Ibox-1.
positionBox(Time2,Id,Ibox2,J):- movementPlayer(down,Time1,Iplayer,J),positionBox(_,Id,Ibox,J),
	Ibox=Iplayer+1,nextTime(Time2,Time1),integer(Ibox2),Ibox2=Ibox+1.

%le box spostate
pushedBox(Time2,Id):-positionBox(Time1,Id,I1,J1),nextTime(Time2,Time1),positionBox(Time2,Id,I2,J2),adjacent(I1,J1,I2,J2).

%se la box non viene spostata la posizione della box è costante
positionBox(Time2,Id,I,J) :- positionBox(Time1,Id,I,J),nextTime(Time2,Time1),not pushedBox(Time2,Id), not maxTime(Time1).

%non è possibile che la scatola si trovi tra due muri
:- positionBox(_,_,I,J), deadlockGround(I,J).

%non è possibile che una box non sia su un ground
:- positionBox(_,_,I,J), not ground(I,J).

%non è possibile che due box siano nello stesso ground nello stesso istante
:- positionBox(Time,Id1,I,J), positionBox(Time,Id2,I,J),Id1!=Id2.
	
